#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
import subprocess
import os
import beamngpy as bngpy
from beamng_msgs.msg import VehicleControl


class twist2bng():
	def __init__(self):
		self.BNG_pub = rospy.Publisher('/control', VehicleControl ,queue_size=10)
		self.cmd_vel_sub = rospy.Subscriber( '/cmd_vel', Twist, self.cmd_vel_callback , queue_size=10 )
		self.rate = rospy.Rate(3)
		self.checker_rate = rospy.Rate(3)
		# self.main_loop()


	def cmd_vel_callback(self, cmd_vel):
		self.has_velosity= cmd_vel
		self.control_linear_vel= cmd_vel.linear.x
		self.control_angular_vel= cmd_vel.angular.z
		self.make_a_move()
        

	def make_a_move(self):
		# print ("new reading")
		self.moveBNG(self.control_linear_vel,self.control_angular_vel)
		# self.BNG(self.control_linear_vel,self.control_angular_vel)


	def BNG(self,control_linear_vel,control_angular_vel):
            # print ("inside BNG")
            Vehicle_Control_msg=VehicleControl()
            Vehicle_Control_msg.throttle = abs(control_linear_vel)
            Vehicle_Control_msg.steering = control_angular_vel
            Vehicle_Control_msg.brake = 0
            Vehicle_Control_msg.parkingbrake = 0 
            Vehicle_Control_msg.clutch = 0
            Vehicle_Control_msg.gear = 1
            print ("",Vehicle_Control_msg)
            self.BNG_pub.publish(Vehicle_Control_msg)
            
        
	def moveBNG(self,control_linear_vel,control_angular_vel):
            # print ("inside movebng")
            Vehicle_Control_msg=VehicleControl()
           
            if control_linear_vel == 0 :    
                Vehicle_Control_msg.throttle = 0
                Vehicle_Control_msg.steering = control_angular_vel
                Vehicle_Control_msg.brake = 1
                Vehicle_Control_msg.parkingbrake = 1 
                Vehicle_Control_msg.clutch = 1
                Vehicle_Control_msg.gear = 0
                
            elif control_linear_vel < 0 :
                Vehicle_Control_msg.throttle = abs(control_linear_vel)
                Vehicle_Control_msg.steering = control_angular_vel
                Vehicle_Control_msg.brake = 0
                Vehicle_Control_msg.parkingbrake = 0 
                Vehicle_Control_msg.clutch = 0
                Vehicle_Control_msg.gear = -1
                
                
            else :
                Vehicle_Control_msg.throttle = abs(control_linear_vel)
                Vehicle_Control_msg.steering = control_angular_vel
                Vehicle_Control_msg.brake = 0
                Vehicle_Control_msg.parkingbrake = 0 
                Vehicle_Control_msg.clutch = 0
                Vehicle_Control_msg.gear = 1
                
            # self.move()    
            print ("",Vehicle_Control_msg)
            self.BNG_pub.publish(Vehicle_Control_msg)
            command= "rostopic pub -r 1 control beamng_msgs/VehicleControl "
            throttle= Vehicle_Control_msg.throttle 
            steering= Vehicle_Control_msg.steering 
            brake= Vehicle_Control_msg.brake 
            parkingbrake= Vehicle_Control_msg.parkingbrake  
            clutch= Vehicle_Control_msg.clutch 
            gear= Vehicle_Control_msg.gear 
            combine = command + str(steering) + " "  + str(throttle) + " "  + str(brake) + " "  + str(parkingbrake) + " "  + str(clutch) + " "  + str(gear) 
            print ("" , combine)
            subprocess.run([combine], universal_newlines=True, shell=True)
            # try:
			# 	cp = subprocess.run([combine], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
			# except FileNotFoundError as e:
			# 	print(e)
	

	def move(self):
		Vehicle_Control_msg=VehicleControl() 
		command= "rostopic pub -r 1 control beamng_msgs/VehicleControl "
		combine = command + str(steering) + " "  + str(throttle) + " "  + str(brake) + " "  + str(parkingbrake) + " "  + str(clutch) + " "  + str(gear) 
		steering= Vehicle_Control_msg.steering 
		throttle= Vehicle_Control_msg.throttle 
		brake= Vehicle_Control_msg.brake 
		parkingbrake= Vehicle_Control_msg.parkingbrake  
		clutch= Vehicle_Control_msg.clutch 
		gear= Vehicle_Control_msg.gear 
		print ("" , combine)
		subprocess.run([combine], universal_newlines=True, shell=True)
		self.moveBNG(self.control_linear_vel,self.control_angular_vel)



    



# def main_loop(self):
#     while not rospy.is_shutdown():
#         self.moveBNG(self.control_linear_vel,self.control_angular_vel)
#         self.checker_rate.sleep()


if __name__ == '__main__':
    rospy.init_node("twist_message_to_BeamNG")
    twist2bng()
    rospy.spin()
