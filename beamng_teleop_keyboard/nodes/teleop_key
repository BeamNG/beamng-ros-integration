#!/usr/bin/env python3

# Copyright (c) 2011, Abdul Rahman , Inc.
# All rights reserved.

import rospy
from geometry_msgs.msg import Twist
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios


import json
import subprocess

import beamngpy as bngpy
from beamng_msgs.msg import VehicleControl
# import beamng_msgs.msg as bng_msgs

from pathlib import Path
from distutils.version import LooseVersion

AGV_MAX_LIN_VEL = 100
AGV_MAX_ANG_VEL = 1.0 

LIN_VEL_STEP_SIZE = 2
ANG_VEL_STEP_SIZE = 0.01

msg = """
Control Your Trackless AGV!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity 
a/d : increase/decrease angular velocity

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed 

^^^^^^^^^^
Please revise back your scripts and launch files 
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.01)  # vel change frequency
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -AGV_MAX_LIN_VEL, AGV_MAX_LIN_VEL)
    return (vel)

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -AGV_MAX_ANG_VEL, AGV_MAX_ANG_VEL)
    return vel

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    # BNG_pub =   rospy.Publisher('control', bng_msgs.VehicleControl ,queue_size=10)
    BNG_pub =   rospy.Publisher('control', VehicleControl ,queue_size=10)
    # BNG_pub =   rospy.Publisher('control', BNG_msgs,queue_size=2)



    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0

    try:
        print(msg)
        while(1):
            key = getKey()
            if key == 'w' :
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 'x' :
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 'a' :
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 'd' :
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == ' ' or key == 's' :
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))
            else:
                if (key == '\x03'):
                    break

            if status == 20 :
                print(msg)
                status = 0

            twist = Twist()

            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

            pub.publish(twist)
            # print("twist",twist)
            # BNG_Teleop_msg=0 1 0 0 0 1
            Vehicle_Control_msg=VehicleControl()
            Vehicle_Control_msg.steering = control_angular_vel
            Vehicle_Control_msg.throttle = control_linear_vel
            Vehicle_Control_msg.brake = 0.0 
            Vehicle_Control_msg.parkingbrake = 0.0 
            Vehicle_Control_msg.clutch = 0.0
            Vehicle_Control_msg.gear = 1
            print ("Vehicle_Control_msg",Vehicle_Control_msg)
            BNG_pub.publish(Vehicle_Control_msg)
            command= "rostopic pub -1 control beamng_msgs/VehicleControl "
            a = "0 1 0 0 0 1" 
            # print("",a)
            combine = command + a
            print ("" , combine)
            os.popen(combine)
            # print("command",command)
            # print ("Vehicle_Control_msg.steering" ,Vehicle_Control_msg.steering)
            # print ("Vehicle_Control_msg.throttle" ,Vehicle_Control_msg.throttle)
            # print ("Vehicle_Control_msg.brake" ,Vehicle_Control_msg.brake)
            # print ("Vehicle_Control_msg.parkingbrake" ,Vehicle_Control_msg.parkingbrake)
            # print ("Vehicle_Control_msg.gear" ,Vehicle_Control_msg.gear)
            # print ("Vehicle_Control_msg.clutch" ,Vehicle_Control_msg.clutch)
            


    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
